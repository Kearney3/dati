name: Deploy to Multiple Platforms

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '24'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build application
      run: npm run build
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/

  # 部署到GitHub Pages
  deploy-github-pages:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    permissions:
      contents: read
      pages: write
      id-token: write
      
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
      
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist
        path: dist/
        
    - name: Setup Pages
      uses: actions/configure-pages@v4
      with:
        enablement: true
      
    - name: Upload to GitHub Pages
      uses: actions/upload-pages-artifact@v3
      with:
        path: dist/
        
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4

  # 部署到Vercel
  deploy-vercel:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Check Vercel secrets
      run: |
        echo "🔍 检查Vercel配置..."
        
        # 检查必要的secrets是否配置
        if [ -z "${{ secrets.VERCEL_TOKEN }}" ]; then
          echo "❌ VERCEL_TOKEN 未配置"
          echo "请按照 VERCEL_SETUP.md 配置Vercel Token"
          exit 1
        fi
        
        if [ -z "${{ secrets.VERCEL_ORG_ID }}" ]; then
          echo "❌ VERCEL_ORG_ID 未配置"
          echo "请按照 VERCEL_SETUP.md 配置Vercel Org ID"
          exit 1
        fi
        
        if [ -z "${{ secrets.VERCEL_PROJECT_ID }}" ]; then
          echo "❌ VERCEL_PROJECT_ID 未配置"
          echo "请按照 VERCEL_SETUP.md 配置Vercel Project ID"
          exit 1
        fi
        
        echo "✅ Vercel secrets 配置正确"
        echo "🚀 开始部署到Vercel..."
        
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to Vercel
      id: deploy
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        vercel-args: '--prod'
        
    - name: Comment deployment URL
      uses: actions/github-script@v7
      if: github.event_name == 'pull_request'
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `🚀 **Vercel部署成功!**\n\n预览链接: ${{ steps.deploy.outputs.preview-url }}`
          })

  # 部署到Netlify
  deploy-netlify:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Check Netlify secrets
      run: |
        echo "🔍 检查Netlify配置..."
        
        # 检查必要的secrets是否配置
        if [ -z "${{ secrets.NETLIFY_AUTH_TOKEN }}" ]; then
          echo "❌ NETLIFY_AUTH_TOKEN 未配置"
          echo "请按照下面的说明配置Netlify Auth Token"
          exit 1
        fi
        
        if [ -z "${{ secrets.NETLIFY_SITE_ID }}" ]; then
          echo "❌ NETLIFY_SITE_ID 未配置"
          echo "请按照下面的说明配置Netlify Site ID"
          exit 1
        fi
        
        echo "✅ Netlify secrets 配置正确"
        echo "🚀 开始部署到Netlify..."
        
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist
        path: dist/
        
    - name: Deploy to Netlify
      id: deploy
      uses: nwtgck/actions-netlify@v2.0
      with:
        publish-dir: './dist'
        production-branch: main
        github-token: ${{ secrets.GITHUB_TOKEN }}
        deploy-message: "Deploy from GitHub Actions"
        enable-pull-request-comment: true
        enable-commit-comment: true
        overwrites-pull-request-comment: true
      env:
        NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
        NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
      timeout-minutes: 1
      
    - name: Comment deployment URL
      uses: actions/github-script@v7
      if: github.event_name == 'pull_request'
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `🚀 **Netlify部署成功!**\n\n预览链接: ${{ steps.deploy.outputs.url }}`
          })

  # 构建Docker镜像 (Docker Hub)
  build-docker:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: Extract repository name
      id: repo-name
      run: echo "name=${GITHUB_REPOSITORY#*/}" >> $GITHUB_OUTPUT
        
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./deploy/Dockerfile
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/dati:latest
          ${{ secrets.DOCKER_USERNAME }}/dati:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max